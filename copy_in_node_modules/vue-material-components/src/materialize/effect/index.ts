/*!
 * Materialize v0.97.5 (http://materializecss.com)
 * Copyright 2014-2015 Materialize
 * MIT License (https://raw.githubusercontent.com/Dogfalo/materialize/master/LICENSE)
 */
/**
 * Disable mousedown event for 500ms during and after touch
 */
var TouchHandler = {
    /* uses an integer rather than bool so there's no issues with
     * needing to clear timeouts if another touch event occurred
     * within the 500ms. Cannot mouseup between touchstart and
     * touchend, nor in the 500ms after touchend. */
    touches: 0,
    allowEvent: function(e) {
        var allow = true;

        if (e.type === 'touchstart') {
            TouchHandler.touches += 1; //push
        } else if (e.type === 'touchend' || e.type === 'touchcancel') {
            setTimeout(function() {
                if (TouchHandler.touches > 0) {
                    TouchHandler.touches -= 1; //pop after 500ms
                }
            }, 500);
        } else if (e.type === 'mousedown' && TouchHandler.touches > 0) {
            allow = false;
        }

        return allow;
    },
    touchup: function(e) {
        TouchHandler.allowEvent(e);
    }
};

// Find exact position of element
function isWindow(obj) {
    return obj !== null && obj === obj.window;
}

function getWindow(elem) {
    return isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
}

function offset(elem) {
    var docElem, win,
        box = {top: 0, left: 0},
        doc = elem && elem.ownerDocument;

    docElem = doc.documentElement;

    if (typeof elem.getBoundingClientRect !== typeof undefined) {
        box = elem.getBoundingClientRect();
    }
    win = getWindow(doc);
    return {
        top: box.top + win.pageYOffset - docElem.clientTop,
        left: box.left + win.pageXOffset - docElem.clientLeft
    };
}

function convertStyle(obj) {
    var style = '';

    for (var a in obj) {
        if (obj.hasOwnProperty(a)) {
            style += (a + ':' + obj[a] + ';');
        }
    }

    return style;
}

export default {

    // Effect delay
    duration: 750,

    show: function(e: any, element: any) {

        // Disable right click
        if (e.button === 2) {
            return false;
        }

        var el = element || this;

        // Create ripple
        var ripple = document.createElement('div');
        ripple.className = 'waves-ripple';
        el.appendChild(ripple);

        // Get click coordinate and element witdh
        var pos         = offset(el);
        var relativeY   = (e.pageY - pos.top);
        var relativeX   = (e.pageX - pos.left);
        var scale       = 'scale('+((el.clientWidth / 100) * 10)+')';

        // Support for touch devices
        if ('touches' in e) {
            relativeY   = (e.touches[0].pageY - pos.top);
            relativeX   = (e.touches[0].pageX - pos.left);
        }

        // Attach data to element
        ripple.setAttribute('data-hold', Date.now().toString());
        ripple.setAttribute('data-scale', scale);
        ripple.setAttribute('data-x', relativeX.toString());
        ripple.setAttribute('data-y', relativeY.toString());

        // Set ripple position
        var rippleStyle: any = {
            'top': relativeY+'px',
            'left': relativeX+'px'
        };

        ripple.className = ripple.className + ' waves-notransition';
        ripple.setAttribute('style', convertStyle(rippleStyle));
        ripple.className = ripple.className.replace('waves-notransition', '');

        // Scale the ripple
        rippleStyle['-webkit-transform'] = scale;
        rippleStyle['-moz-transform'] = scale;
        rippleStyle['-ms-transform'] = scale;
        rippleStyle['-o-transform'] = scale;
        rippleStyle.transform = scale;
        rippleStyle.opacity   = '1';

        rippleStyle['-webkit-transition-duration'] = this.duration + 'ms';
        rippleStyle['-moz-transition-duration']    = this.duration + 'ms';
        rippleStyle['-o-transition-duration']      = this.duration + 'ms';
        rippleStyle['transition-duration']         = this.duration + 'ms';

        rippleStyle['-webkit-transition-timing-function'] = 'cubic-bezier(0.250, 0.460, 0.450, 0.940)';
        rippleStyle['-moz-transition-timing-function']    = 'cubic-bezier(0.250, 0.460, 0.450, 0.940)';
        rippleStyle['-o-transition-timing-function']      = 'cubic-bezier(0.250, 0.460, 0.450, 0.940)';
        rippleStyle['transition-timing-function']         = 'cubic-bezier(0.250, 0.460, 0.450, 0.940)';

        ripple.setAttribute('style', convertStyle(rippleStyle));
    },

    hide: function(e: any, el: any) {
        TouchHandler.touchup(e);

        var width = el.clientWidth * 1.4;

        // Get first ripple
        var ripple = null;
        var ripples = el.getElementsByClassName('waves-ripple');
        if (ripples.length > 0) {
            ripple = ripples[ripples.length - 1];
        } else {
            return false;
        }

        var relativeX   = ripple.getAttribute('data-x');
        var relativeY   = ripple.getAttribute('data-y');
        var scale       = ripple.getAttribute('data-scale');

        // Get delay beetween mousedown and mouse leave
        var diff = Date.now() - Number(ripple.getAttribute('data-hold'));
        var delay = 350 - diff;

        if (delay < 0) {
            delay = 0;
        }

        // Fade out ripple after delay
        setTimeout(() => {
            var style = {
                'top': relativeY+'px',
                'left': relativeX+'px',
                'opacity': '0',

                // Duration
                '-webkit-transition-duration': this.duration + 'ms',
                '-moz-transition-duration': this.duration + 'ms',
                '-o-transition-duration': this.duration + 'ms',
                'transition-duration': this.duration + 'ms',
                '-webkit-transform': scale,
                '-moz-transform': scale,
                '-ms-transform': scale,
                '-o-transform': scale,
                'transform': scale,
            };

            ripple.setAttribute('style', convertStyle(style));

            setTimeout(() => {
                try {
                    el.removeChild(ripple);
                } catch(e) {
                    return false;
                }
            }, this.duration);
        }, delay);
    },

    /*
     // Little hack to make <input> can perform waves effect
     wrapInput: function(elements) {
     for (var a = 0; a < elements.length; a++) {
     var el = elements[a];

     if (el.tagName.toLowerCase() === 'input') {
     var parent = el.parentNode;

     // If input already have parent just pass through
     if (parent.tagName.toLowerCase() === 'i' && parent.className.indexOf('waves-effect') !== -1) {
     continue;
     }

     // Put element class and style to the specified parent
     var wrapper = document.createElement('i');
     wrapper.className = el.className + ' waves-input-wrapper';

     var elementStyle = el.getAttribute('style');

     if (!elementStyle) {
     elementStyle = '';
     }

     wrapper.setAttribute('style', elementStyle);

     el.className = 'waves-button-input';
     el.removeAttribute('style');

     // Put element as child
     parent.replaceChild(wrapper, el);
     wrapper.appendChild(el);
     }
     }
     }
     */
};
